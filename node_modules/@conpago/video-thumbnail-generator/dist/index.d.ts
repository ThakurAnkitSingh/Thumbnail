/// <reference types="node" />
import ffmpeg from "fluent-ffmpeg";
import { Readable } from "stream";
export default class ThumbnailGenerator {
    sourcePath: string | Readable | undefined;
    thumbnailPath: string;
    count: number;
    percent: string;
    logger: null;
    size: string;
    fileNameFormat: string;
    tmpDir: string;
    /**
     * @constructor
     *
     * @param {String} [opts.sourcePath] - 'full path to video file'
     * @param {String} [opts.thumbnailPath] - 'path to where thumbnail(s) should be saved'
     * @param {Number} [opts.count] - 'number of thumbnails to generate'
     * @param {Number} [opts.percent]
     * @param {String} [opts.size]
     * @param {Logger} [opts.logger]
     */
    constructor(opts: {
        sourcePath: string | Readable | undefined;
        thumbnailPath: string;
        count?: number;
        percent?: string;
        logger?: null;
        size?: string;
        tmpDir?: string;
    });
    getFfmpegInstance(): ffmpeg.FfmpegCommand;
    /**
     * Method to generate one thumbnail by being given a percentage value.
     *
     * @method generateOneByPercent
     *
     * @param {Number} percent
     * @param {String} [opts.folder]
     * @param {String} [opts.size] - 'i.e. 320x320'
     * @param {String} [opts.filename]
     *
     * @public
     */
    generateOneByPercent(percent: number, opts?: {
        folder: string;
        filename?: string;
        size?: string;
    }): Promise<string | undefined>;
    /**
     * Method to generate thumbnails
     *
     * @method generate
     *
     * @param {String} [opts.folder]
     * @param {Number} [opts.count]
     * @param {String} [opts.size] - 'i.e. 320x320'
     * @param {String} [opts.filename]
     *
     * @public
     */
    generate(opts?: {
        count: number;
        filename?: string;
        size?: string;
    }): Promise<string[]>;
    /**
     * Method to generate the palette from a video (required for creating gifs)
     *
     * @method generatePalette
     *
     * @param {string} [opts.videoFilters]
     * @param {string} [opts.offset]
     * @param {string} [opts.duration]
     * @param {string} [opts.videoFilters]
     *
     * @public
     */
    private generatePalette;
    /**
     * Method to create a short gif thumbnail from an mp4 video
     *
     * @method generateGif
     *
     * @param {Number} opts.fps
     * @param {Number} opts.scale
     * @param {Number} opts.speedMultiple
     * @param {Boolean} opts.deletePalette
     *
     * @public
     */
    generateGif(opts?: {
        fps?: number;
        scale?: number;
        speedMultiplier?: number;
        deletePalette?: boolean;
    }): Promise<string>;
}
